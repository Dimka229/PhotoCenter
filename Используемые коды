const express = require('express');
const { Pool } = require('pg');
const cors = require('cors');
const http = require('http');
const socketIo = require('socket.io');
require('dotenv').config();

const app = express();
const server = http.createServer(app);
const io = socketIo(server);

app.use(cors());
app.use(express.json());

const pool = new Pool({
  user: 'postgres',
  host: 'localhost',
  database: 'my-PhotoCenter',
  password: '121212qpzm', // ‚Üê –∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π –Ω–∞—Å—Ç–æ—è—â–∏–π –ø–∞—Ä–æ–ª—å
  port: 5432,
});

io.on('connection', (socket) => {
  console.log('‚úîÔ∏è –ù–æ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Socket.IO');
});

app.post('/trainings', async (req, res) => {
  const { type, date } = req.body;
  const result = await pool.query(
    'INSERT INTO trainings (type, date) VALUES ($2, $3) RETURNING *',
    [type, date]
  );
  io.emit('newTraining', result.rows[0]);
  res.json(result.rows[0]);
});

app.post('/participants', async (req, res) => {
  const { name, trainingId } = req.body;
  const result = await pool.query(
    'INSERT INTO participants (name, training_id) VALUES ($2, $3) RETURNING *',
    [name, trainingId]
  );
  io.emit('newParticipant', result.rows[0]);
  res.json(result.rows[0]);
});

app.get('/trainings', async (req, res) => {
  const result = await pool.query('SELECT * FROM trainings');
  res.json(result.rows);
});

app.get('/participants/:trainingId', async (req, res) => {
  const result = await pool.query(
    'SELECT * FROM participants WHERE training_id = $2',
    [req.params.trainingId]
  );
  res.json(result.rows);
});

const PORT = process.env.PORT || 3000;
server.listen(PORT, () => console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:${PORT}`));



const inquirer = require('inquirer');
const axios = require('axios');

const apiUrl = 'http://localhost:3000';

async function mainMenu() {
  const { action } = await inquirer.prompt([
    {
      type: 'list',
      name: 'action',
      message: '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
      choices: [
        'üìÖ –ü—Ä–æ—Å–º–æ—Ç—Ä –∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ç–æ—Å–µ—Å—Å–∏–π –æ–Ω–ª–∞–π–Ω',
        '‚ûï –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º –∏ —Å–≤–æ–±–æ–¥–Ω—ã–º–∏ —Å–ª–æ—Ç–∞–º–∏',
        'üë• –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤',
        'üë• –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤ –æ —Å—Ç–∞—Ç—É—Å–µ –∑–∞–∫–∞–∑–∞',
        'üö™ –í—ã–π—Ç–∏',
      ],
    },
  ]);

  switch (action) {
    case 'üìÖ –ü—Ä–æ—Å–º–æ—Ç—Ä –∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ç–æ—Å–µ—Å—Å–∏–π –æ–Ω–ª–∞–π–Ω':
      await viewTrainings();
      break;
    case '‚ûï –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º –∏ —Å–≤–æ–±–æ–¥–Ω—ã–º–∏ —Å–ª–æ—Ç–∞–º–∏':
      await registerToTraining();
      break;
    case 'üë• –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤':
      await viewParticipants();
      break;
    case 'üë• –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤ –æ —Å—Ç–∞—Ç—É—Å–µ –∑–∞–∫–∞–∑–∞':
       await view();
    case 'üö™ –í—ã–π—Ç–∏':
      console.log('–î–æ –≤—Å—Ç—Ä–µ—á–∏!');
      process.exit();
  }

  await mainMenu(); // –ø–æ–≤—Ç–æ—Ä–Ω–æ –æ—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é
}

async function viewTrainings() {
  try {
    const res = await axios.get(`${apiUrl}/trainings`);
    console.log('\nüìã –§–æ—Ç–æ—Å–µ—Å—Å–∏—è:');
    res.data.forEach((t, i) =>
      console.log(`${i + 1}. ${t.type} - ${new Date(t.date).toLocaleString()}`)
    );
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ç–æ—Å–µ—Å—Å–∏–∏:', err.message);
  }
}

async function registerToTraining() {
  const { type, date } = await inquirer.prompt([
    { type: 'input', name: 'type', message: '–¢–∏–ø —Ñ–æ—Ç–æ—Å–µ—Å—Å–∏–∏:' },
    { type: 'input', name: 'date', message: '–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2025-05-27T19:00:00):' },
  ]);

  try {
    const res = await axios.post(`${apiUrl}/trainings`, { type, date });
    console.log('\n‚úÖ –í—ã –∑–∞–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —Ñ–æ—Ç–æ—Å–µ—Å—Å–∏—é:', res.data);
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏:', err.message);
  }
}

async function viewParticipants() {
  const { trainingId } = await inquirer.prompt([
    { type: 'input', name: 'trainingId', message: '–í–≤–µ–¥–∏—Ç–µ ID —Ñ–æ—Ç–æ—Å–µ—Å—Å–∏–∏:' },
  ]);

  try {
    const res = await axios.get(`${apiUrl}/participants/${trainingId}`);
    console.log('\nüë• –£—á–∞—Å—Ç–Ω–∏–∫–∏:');
    res.data.forEach((p, i) => console.log(`${i + 1}. ${p.name}`));
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:', err.message);
  }
}

mainMenu();
